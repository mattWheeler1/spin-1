import numpy as np
import h5py
import cupy as cp
import include.phase_imprinting

"""Turbulence simulation for a scalar BEC. Vortices are generated by via phase imprinting."""

# --------------------------------------------------------------------------------------------------------------------
# Controlled variables:
# --------------------------------------------------------------------------------------------------------------------
Nx, Ny = 1024, 1024
Mx, My = Nx // 2, Ny // 2  # Number of grid pts
dx = dy = 1  # Grid spacing
dkx = np.pi / (Mx * dx)
dky = np.pi / (My * dy)  # K-space spacing
len_x = Nx * dx  # Box length
len_y = Ny * dy
x = cp.arange(-Mx, Mx) * dx
y = cp.arange(-My, My) * dy
X, Y = cp.meshgrid(x, y)  # Spatial meshgrid

# k-space arrays and meshgrid:
kx = cp.arange(-Mx, Mx) * dkx
ky = cp.arange(-My, My) * dky
Kx, Ky = cp.meshgrid(kx, ky)  # K-space meshgrid
Kx, Ky = cp.fft.fftshift(Kx), cp.fft.fftshift(Ky)

# Controlled variables
V = 0.  # Doubly periodic box
c0 = 3e-5

# Time steps, number and wavefunction save variables
Nt = 10000000
Nframe = 20000   # Save data every Nframe number of timesteps
dt = 1e-2  # Imaginary time timestep
t = 0.
k = 0   # Array index

filename = 'scalar_imp_noise'    # Name of file to save data to
data_path = '../scratch/data/scalar/{}.hdf5'.format(filename)
backup_data_path = '../scratch/data/scalar/backups/{}_backup.hdf5'.format(filename)

fresh_simulation = True  # Boolean that corresponds to a fresh simulation if True or a continued simulation if False
loading_vortex_pos = True

# --------------------------------------------------------------------------------------------------------------------
# Generating initial state:
# --------------------------------------------------------------------------------------------------------------------
# If it is a continued simulation, load the previous data and continue to evolution:
if not fresh_simulation:
    previous_data = h5py.File(backup_data_path, 'r')
    psi_k = cp.array(previous_data['wavefunction/psi_k'])
    t = np.round(previous_data['time'][...])
    k = previous_data['array_index'][...]
    previous_data.close()

# If it is a fresh simulation, generate the initial state:
else:
    n_0 = 3.2e9 / (Nx * dx * Ny * dy)
    xi = 1 / np.sqrt(n_0 * c0)  # Healing length

    # Store parameters in dictionary for saving
    parameters = {
        "c0": c0,
        "n_0": n_0,
        "xi": xi,
        "m": 1 / 2,
    }

    # Generate vortex positions:
    N_vort = 48 ** 2

    if loading_vortex_pos:
        with h5py.File('vortex_pos_uniform', 'r') as data:
            vort_pos = iter(data['positions'])
    else:
        vort_pos = include.phase_imprinting.get_positions(N_vort, 2 * xi, len_x, len_y)  # Generator of vortex positions

    theta = include.phase_imprinting.get_phase(N_vort, vort_pos, X, Y)   # Phase imprinting

    # Construct wavefunction and add noise:
    psi_k = cp.sqrt(Nx * Ny) * cp.sqrt(1 / 2) * cp.exp(1j * cp.random.uniform(0, 2 * cp.pi, size=(Nx, Ny)))
    psi_k[Nx // 2, Ny // 2] = Nx * Ny * cp.sqrt(n_0)
    psi = cp.fft.ifft2(cp.fft.ifftshift(psi_k)) * cp.exp(1j * theta)

    atom_num = dx * dy * cp.sum(cp.abs(psi) ** 2)

    theta_fix = cp.angle(psi)
    psi_k = cp.fft.fft2(psi)

    # ------------------------------------------------------------------------------------------------------------------
    # Imaginary time evolution
    # ------------------------------------------------------------------------------------------------------------------
    for i in range(2000):
        # Kinetic energy:
        psi_k *= cp.exp(-0.25 * dt * (Kx ** 2 + Ky ** 2))

        # Backward FFT:
        psi = cp.fft.ifft2(psi_k)

        # Interaction term:
        psi *= cp.exp(-dt * (c0 * cp.abs(psi) ** 2))

        # Forward FFT:
        psi_k = cp.fft.fft2(psi)

        # Kinetic energy:
        psi_k *= cp.exp(-0.25 * dt * (Kx ** 2 + Ky ** 2))

        # Re-normalising:
        atom_num_new = dx * dy * cp.sum(cp.abs(cp.fft.ifft2(psi_k)) ** 2)
        psi_k = cp.fft.fft2(cp.sqrt(atom_num) * cp.fft.ifft2(psi_k) / cp.sqrt(atom_num_new))

        # Fixing phase:
        psi = cp.fft.ifft2(psi_k)
        psi *= cp.exp(1j * theta_fix) / cp.exp(1j * cp.angle(psi))
        psi_k = cp.fft.fft2(psi)

    # Creating file to save to:
    with h5py.File(data_path, 'w') as data:
        # Saving spatial data:
        data.create_dataset('grid/x', x.shape, data=cp.asnumpy(x))
        data.create_dataset('grid/y', y.shape, data=cp.asnumpy(y))

        # Saving time variables:
        data.create_dataset('time/Nt', data=Nt)
        data.create_dataset('time/dt', data=dt)
        data.create_dataset('time/Nframe', data=Nframe)

        # Save parameters:
        data.create_dataset('parameters', data=str(parameters))

        # Creating empty wavefunction datasets to store data:
        data.create_dataset('wavefunction/psi', (Nx, Ny, 1), maxshape=(Nx, Ny, None), dtype='complex64')

        # Stores initial state:
        data.create_dataset('initial_state/psi', data=cp.asnumpy(cp.fft.ifft2(psi_k)))

# ---------------------------------------------------------------------------------------------------------------------
# Real time evolution
# ---------------------------------------------------------------------------------------------------------------------
for i in range(Nt):

    # Kinetic energy:
    psi_k *= cp.exp(-0.25 * 1j * dt * (Kx ** 2 + Ky ** 2))

    # Backward FFT:
    psi = cp.fft.ifft2(psi_k)

    # Interaction term:
    psi *= cp.exp(-1j * dt * (c0 * cp.abs(psi) ** 2))

    # Forward FFT:
    psi_k = cp.fft.fft2(psi)

    # Kinetic energy:
    psi_k *= cp.exp(-0.25 * 1j * dt * (Kx ** 2 + Ky ** 2))

    # Saves data
    if np.mod(i + 1, Nframe) == 0:
        with h5py.File(data_path, 'r+') as data:
            new_psi = data['wavefunction/psi']
            new_psi.resize((Nx, Ny, k + 1))
            new_psi[:, :, k] = cp.asnumpy(cp.fft.ifft2(psi_k))
        k += 1

    # Saves 'backup' wavefunction we can use to continue simulations if ended:
    if np.mod(i + 1, 50000) == 0:
        with h5py.File(backup_data_path, 'w') as backup:
            backup.create_dataset('time', data=t)
            backup.create_dataset('wavefunction/psi_k', shape=psi_k.shape, dtype='complex64', data=cp.asnumpy(psi_k))
            backup.create_dataset('array_index', data=k)

    # Prints current time
    if np.mod(i, Nframe) == 0:
        print('t = %1.4f' % t)

    t += dt
